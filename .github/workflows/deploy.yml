name: Build and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create client .env file
        run: |
          echo "SSL_CRT_FILE=${{ secrets.SSL_CRT_FILE }}" > client/.env
          echo "SSL_KEY_FILE=${{ secrets.SSL_KEY_FILE }}" >> client/.env
          echo "HTTPS=${{ secrets.HTTPS }}" >> client/.env
          echo "REACT_APP_CLIENT_HOST=${{ secrets.REACT_APP_CLIENT_HOST }}" >> client/.env
          echo "REACT_APP_CHAT_SERVER_HOST=${{ secrets.REACT_APP_CHAT_SERVER_HOST }}" >> client/.env
          echo "REACT_APP_CMS_SERVER_HOST=${{ secrets.REACT_APP_CMS_SERVER_HOST }}" >> client/.env
          echo "REACT_APP_CHAT_SERVER_API_URL=${{ secrets.REACT_APP_CHAT_SERVER_API_URL }}" >> client/.env

      - name: Create server .env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > server/.env
          echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> server/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> server/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> server/.env
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> server/.env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> server/.env
          echo "JWT_RECOVERY_SECRET=${{ secrets.JWT_RECOVERY_SECRET }}" >> server/.env
          echo "JWT_ACCESS_EXPIRATION_MINUTES=${{ secrets.JWT_ACCESS_EXPIRATION_MINUTES }}" >> server/.env
          echo "JWT_REFRESH_EXPIRATION_DAYS=${{ secrets.JWT_REFRESH_EXPIRATION_DAYS }}" >> server/.env
          echo "JWT_RESET_PASSWORD_EXPIRATION_MINUTES=${{ secrets.JWT_RESET_PASSWORD_EXPIRATION_MINUTES }}" >> server/.env
          echo "JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=${{ secrets.JWT_VERIFY_EMAIL_EXPIRATION_MINUTES }}" >> server/.env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> server/.env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> server/.env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> server/.env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> server/.env
          echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> server/.env
          echo "CLIENT_HOST=${{ secrets.CLIENT_HOST }}" >> server/.env
          echo "SSL_CERT_PATH=${{ secrets.SSL_CERT_PATH }}" >> server/.env
          echo "SSL_KEY_PATH=${{ secrets.SSL_KEY_PATH }}" >> server/.env
          echo "UPLOADS_DIR=${{ secrets.UPLOADS_DIR }}" >> server/.env
          echo "CORS_ORIGIN_DEVELOPMENT=${{ secrets.CORS_ORIGIN_DEVELOPMENT }}" >> server/.env
          echo "CORS_ORIGIN_PRODUCTION=${{ secrets.CORS_ORIGIN_PRODUCTION }}" >> server/.env


      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          mkdir -p ~/.ssh
          ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
          
          scp -i private_key docker-compose.yml $SSH_USERNAME@$SSH_HOST:/home/$SSH_USERNAME/ChuotCordV2 
          
          ssh -i private_key $SSH_USERNAME@$SSH_HOST << 'EOF'
            cd /home/$SSH_USERNAME/ChuotCordV2
            
            docker-compose down --remove-orphans
            
            docker image prune -a -f
            
            docker-compose pull
            docker-compose up -d --force-recreate
          EOF
